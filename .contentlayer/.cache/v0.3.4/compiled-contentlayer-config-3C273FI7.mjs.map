{
  "version": 3,
  "sources": ["../../../data/meta/siteMetadata.js", "../../../contentlayer.config.js"],
  "sourcesContent": ["const SiteMetadata = {\n  'language': 'en-us',\n  'locale': 'en-US',\n  'siteLogo': '/static/images/logo.svg',\n  'siteRepo': 'https://github.com/ahmadassaf/blog',\n  'siteUrl': 'https://assaf.website',\n  'socialBanner': '/static/images/twitter-card.png',\n  'theme': 'light',\n  'title': 'Ahmad Assaf Personal Space'\n};\n\nmodule.exports = SiteMetadata;\n", "import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport { writeFileSync } from 'fs';\nimport GithubSlugger from 'github-slugger';\nimport path from 'path';\nimport { extractTocHeadings,\n  remarkCodeTitles,\n  remarkExtractFrontmatter,\n  remarkImgToJsx } from 'pliny/mdx-plugins/index.js';\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js';\nimport readingTime from 'reading-time';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCitation from 'rehype-citation';\nimport rehypeKatex from 'rehype-katex';\nimport rehypePresetMinify from 'rehype-preset-minify';\nimport rehypePrismPlus from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\n\nimport siteMetadata from './data/meta/siteMetadata';\n\nconst root = process.cwd();\n\nconst computedFields = {\n  'filePath': {\n    'resolve': (doc) => doc._raw.sourceFilePath,\n    'type': 'string'\n  },\n  'path': {\n    'resolve': (doc) => doc._raw.flattenedPath,\n    'type': 'string'\n  },\n  'readingTime': { 'resolve': (doc) => readingTime(doc.body.raw), 'type': 'json' },\n  'slug': {\n    'resolve': (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n    'type': 'string'\n  },\n  'toc': { 'resolve': (doc) => extractTocHeadings(doc.body.raw), 'type': 'string' }\n};\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount = {};\n\n  allBlogs.forEach((file) => {\n    if (file.tags && file.draft !== true) file.tags.forEach((tag) => {\n      const formattedTag = GithubSlugger.slug(tag);\n\n      if (formattedTag in tagCount) tagCount[formattedTag] += 1;\n      else tagCount[formattedTag] = 1;\n\n    });\n\n  });\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount));\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`, JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    );\n    console.log('Local search index generated...');\n  }\n}\n\nexport const Post = defineDocumentType(() => {\n  return {\n    'computedFields': {\n      ...computedFields,\n      'structuredData': {\n        'resolve': (doc) => {\n          return {\n            '@context': 'https://schema.org',\n            '@type': 'BlogPosting',\n            'author': doc.authors,\n            'dateModified': doc.lastmod || doc.date,\n            'datePublished': doc.date,\n            'description': doc.summary,\n            'headline': doc.title,\n            'image': doc.images ? doc.images[0] : siteMetadata.socialBanner,\n            'url': `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`\n          };\n        },\n        'type': 'json'\n      }\n    },\n    'contentType': 'mdx',\n    'fields': {\n      'bibliography': { 'type': 'string' },\n      'category': { 'required': true, 'type': 'string' },\n      'date': { 'required': true, 'type': 'date' },\n      'draft': { 'type': 'boolean' },\n      'featured': { 'type': 'boolean' },\n      'layout': { 'type': 'string' },\n      'subtitle': { 'required': false, 'type': 'string' },\n      'summary': { 'type': 'string' },\n      'tags': { 'default': [], 'of': { 'type': 'string' }, 'type': 'list' },\n      'title': { 'required': true, 'type': 'string' }\n    },\n    'filePathPattern': 'blog/**/*.mdx',\n    'name': 'Post'\n  };\n});\n\nexport const Project = defineDocumentType(() => {\n  return {\n    'computedFields': {\n      ...computedFields,\n      'structuredData': {\n        'resolve': (doc) => {\n          return {\n            '@context': 'https://schema.org',\n            '@type': 'BlogPosting',\n            'author': doc.authors,\n            'dateModified': doc.lastmod || doc.date,\n            'datePublished': doc.date,\n            'description': doc.summary,\n            'headline': doc.title,\n            'image': doc.images ? doc.images[0] : siteMetadata.socialBanner,\n            'url': `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`\n          };\n        },\n        'type': 'json'\n      }\n    },\n    'contentType': 'mdx',\n    'fields': {\n      'bibliography': { 'type': 'string' },\n      'category': { 'required': true, 'type': 'string' },\n      'date': { 'required': true, 'type': 'date' },\n      'draft': { 'type': 'boolean' },\n      'featured': { 'type': 'boolean' },\n      'github': { 'required': true, 'type': 'string' },\n      'layout': { 'required': true, 'type': 'string' },\n      'subtitle': { 'required': false, 'type': 'string' },\n      'summary': { 'type': 'string' },\n      'tags': { 'default': [], 'of': { 'type': 'string' }, 'type': 'list' },\n      'title': { 'required': true, 'type': 'string' }\n    },\n    'filePathPattern': 'blog/**/*.mdx',\n    'name': 'Project'\n  };\n});\n\nexport const Author = defineDocumentType(() => {\n  return {\n    computedFields,\n    'contentType': 'mdx',\n    'fields': {\n      'avatar': { 'type': 'string' },\n      'company': { 'type': 'string' },\n      'email': { 'type': 'string' },\n      'github': { 'type': 'string' },\n      'layout': { 'type': 'string' },\n      'linkedin': { 'type': 'string' },\n      'name': { 'required': true, 'type': 'string' },\n      'occupation': { 'type': 'string' },\n      'twitter': { 'type': 'string' }\n    },\n    'filePathPattern': 'authors/**/*.mdx',\n    'name': 'Author'\n  };\n});\n\nexport default makeSource({\n  'contentDirPath': 'data',\n  'documentTypes': [ Post, Author, Project ],\n  'mdx': {\n    'cwd': process.cwd(),\n    'rehypePlugins': [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [ rehypeCitation, { 'path': path.join(root, 'data') }],\n      [ rehypePrismPlus, { 'defaultLanguage': 'js', 'ignoreMissing': true }],\n      rehypePresetMinify\n    ],\n    'remarkPlugins': [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx\n    ]\n  },\n  'onSuccess': async(importData) => {\n    const { allBlogs } = await importData();\n\n    createTagCount(allBlogs);\n    createSearchIndex(allBlogs);\n  }\n});\n"],
  "mappings": "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",
  "names": ["siteMetadata"]
}
